#+TITLE: Doom Emacs Configuration
#+AUTHOR: egorbelibov

#+BEGIN_QUOTE
No rules are universal (except this one).
#+END_QUOTE

* Core Configurations
Jiggle things up with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** User Info
You know, all the conventional stuff…
#+begin_src emacs-lisp
(setq
 user-full-name "Egor Belibov"
 user-mail-address "egor@belibov.dev")
#+end_src

*** Secrets
Don't peek mate -_-
#+begin_src emacs-lisp
(load-file "~/.private.el")
#+end_src

** Sweat Defaults
#+BEGIN_QUOTE
We either live with intention or exist by default.
#+END_QUOTE

*** Common Settings
Quite personal matters, hence no further comments.
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 line-number-mode 1 ;; (modeline)
 column-number-mode 1 ;; (modeline)
 global-display-line-numbers-mode nil
 global-hl-line-mode nil
 global-hl-line-modes nil
 display-line-numbers-type nil
 editorconfig-mode 1
 evil-want-fine-undo t ;; vim-like undo
 fill-column 100
 indent-tabs-mode nil
 tab-width 4
 ispell-dictionary "en_GB"
 locate-command "mdfind"
 multi-term-program "/bin/zsh")
#+end_src

Fine tuned defaults:
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
#+end_src

*** Buffer Defaults
New buffers should be, by default, opened in ~org-mode~, cause ~org-mode~.
#+begin_src emacs-lisp
(setq-default major-mode 'org-mode)
#+end_src

Make Renaming File + Buffer easy
#+begin_src emacs-lisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+end_src

*** Performance Boosters
Let's put some thrusters on the back of this "Roadster".

Emacs has the capability to display ~left-to-right~ and ~right-to-left~ languages at the
same time in the same buffer. I don't need it. Because it adds to the amount of line scans
that Emacs has to do to render a line, here are some changes.
#+begin_src emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)
#+end_src

When the lines in a file are so long that performance could suffer to an unacceptable
degree, the following invokes something much more basic.
#+begin_src emacs-lisp
(global-so-long-mode 1)
#+end_src

-----
*NOTE*: You can test and evaluate performance with ~profiler-start~ and ~profiler-stop~.

** User Interface
*** Font Face
The *ultimate* font for hackers.
#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "JetBrains Mono" :size 12)
 doom-big-font (font-spec :family "JetBrains Mono" :size 12)
 doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 12)
 doom-serif-font (font-spec :family "JetBrains Mono" :size 12))
#+end_src

*** Theme
My *ultimate* theme based on ~Solarized~.
#+begin_src emacs-lisp
;; (load-theme 'eb-dark t)
;; (load-theme 'eb-light t)
(load-theme 'eb-white t)
#+end_src

**** Cursor
#+begin_src emacs-lisp
(setq evil-normal-state-cursor '(box)
      evil-insert-state-cursor '(hbar)
      evil-visual-state-cursor '(hollow)
      evil-operator-state-cursor '(box "#404040")
      evil-replace-state-cursor '(hollow))
#+end_src

*** Modeline
#+begin_src emacs-lisp
(setq-default
 mode-line-format
 '("%e"
   mode-line-front-space
   mode-line-mule-info
   mode-line-client
   mode-line-modified
   mode-line-remote
   mode-line-frame-identification
   mode-line-buffer-identification
   "   "
   "<ETC?>" ;; ETC Reminder (Easier To Change)
   "   "
   mode-line-position
   (vc-mode vc-mode)
   "  "
   mode-name
   "  "
   mode-line-process
   "  "
   mode-line-misc-info mode-line-end-spaces))
#+end_src

*** Disable All The Icons
#+begin_src emacs-lisp
(defadvice! doom--disable-all-the-icons-in-tty-a (&rest _)
  :override '(all-the-icons-octicon all-the-icons-material
              all-the-icons-faicon all-the-icons-fileicon
              all-the-icons-wicon all-the-icons-alltheicon)
  "")
#+end_src

** Bindings
Life-time savers (kinda).

*** (Enable/Disable) Fill column
#+begin_src emacs-lisp
(map! :leader
      (:prefix "b"
       :desc "Display fill-column indicator"    "f" #'display-fill-column-indicator-mode))
#+end_src

*** File
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("f" . "file")
  (:prefix-map ("g" . "goto")
   :desc "Drive"        "/" (cmd! (find-file "/"))
   :desc "Desktop"      "D" (cmd! (find-file "~/Desktop"))
   :desc "Main"         "m" (cmd! (find-file "~/main"))
   :desc "Downloads"    "d" (cmd! (find-file "~/Downloads"))
   :desc "Tmp"          "t" (cmd! (find-file "/tmp"))
   :desc "Home"         "h" (cmd! (find-file "~")))))
#+end_src

*** Counsel
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("c" . "code")
  (:prefix-map ("b" . "Counsel")
   :desc "Find" "/" 'counsel-dash
   :desc "Find (by Cursor)" "." 'counsel-dash-at-point
   :desc "Activate Doc in Buffer" "a" 'counsel-dash-activate-docset
   :desc "Deactivate Doc to Buffer" "d" 'counsel-dash-deactivate-docset)))
#+end_src

*** Ivy-Youtube
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("s" . "search")
  :desc "Youtube" "y" 'ivy-youtube))
#+end_src

*** Org-Roam
#+begin_src emacs-lisp
(map!
 :leader
 (:prefix-map ("t" . "toggle")
  :desc "Org-Roam Buffer" "o" 'org-roam-buffer-toggle-display
  :desc "Composition Mode (Ligatures)" "c" 'toggle-auto-composition))
#+end_src

** Package Stack
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src

*** Instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Install packages here, by declaring them with the ~package!~ macro.
Upon adding new package, run ~doom refresh~ and restart Emacs.

**** Package in MELPA/ELPA/emacsmirror
To install ~the-package~ from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp
(package! the-package)
#+end_src

**** Packages from git repositories
To install a package directly from a particular repo, you'll need to specify a ~:recipe~.
You'll find documentation on what ~:recipe~ accepts [[https://github.com/raxod502/straight.el#the-recipe-format][here]]:
#+begin_src emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a ~PACKAGENAME.el~ file, or is
located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:
#+begin_src emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

**** Disabling built-in packages
To disable a package included with Doom, you can do so here with the ~:disable~ property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src

Override the recipe of a built in package without having to specify all the properties
for ~:recipe~. These will inherit the rest of its recipe from Doom or the
package providers.
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag. This is required
for some

#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src

*** Sweat Packages
#+BEGIN_QUOTE
Always strive to make complex things simple.
#+END_QUOTE

**** All The Fun
Flash words, increase reading speed.
#+begin_src emacs-lisp
(package! spray)
#+end_src

Let's get those fingers moving.
#+begin_src emacs-lisp
(package! speed-type)
#+end_src

**** Convenient
The technologies of convenience are making our sphere of exploration and experience smaller.

The worst part about ~org-mode~? Having to leave it.
#+begin_src emacs-lisp
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))

(use-package! org-pandoc-import :after org)
#+end_src

The fanciest terminal for emacs.
#+begin_src emacs-lisp
(package! multi-term)
#+end_src

Who uses the mouse in Emacs?
#+begin_src emacs-lisp
(package! disable-mouse)
#+end_src

When in need of logging commands.
#+begin_src emacs-lisp
(package! command-log-mode)
#+end_src

Every one needs to jump around dumbly from time to time, right?
#+begin_src emacs-lisp
(package! dumb-jump)
#+end_src

For indentation. Specially useful for nim.
#+begin_src emacs-lisp
(package! indent-guide)
#+end_src

Elisp formatting
#+begin_src emacs-lisp
(package! elisp-format)
#+end_src

Who doesn't read EPUBs?
#+begin_src emacs-lisp
(package! nov)

(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (concat doom-cache-dir "nov-places")))
#+end_src

Yoututbe in Emacs (F#CK those wanky algorithms)
#+begin_src emacs-lisp
(package! ivy-youtube)
#+end_src

Movedidakadooo
#+begin_src emacs-lisp
(package! transpose-frame)
#+end_src

**** Language Support
If it ain't useful and fast, why bother?

Svelte, the love of my life.
#+begin_src emacs-lisp
(package! svelte-mode)
#+end_src

*** Balderdash (Disabled) Packages
Cause why in the world were they included?

Disable package that overlays code with errors/warnings from Flycheck
#+begin_src emacs-lisp
(package! flycheck-popup-tip :disable t)
#+end_src

** Package Configuration
#+BEGIN_QUOTE
Another famous fluctuation that programs you is the exact configuration of your DNA.
#+END_QUOTE

*** Calc
Cause radians are rad.
#+begin_src emacs-lisp
(setq calc-angle-mode 'rad
      calc-algebraic-mode t ;; allows '2*x instead of 'x<RET>2*
      calc-symbolic-mode t) ;; keeps stuff like √2 irrational for as long as possible
#+end_src

*** Company
Completion is nice but, only when I want it...
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay nil)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+end_src

Also, improve ~company~ (related) memory.
#+begin_src emacs-lisp
(setq-default history-length 50)
(setq-default history-delete-duplicates t)
#+end_src

*** Disable-Mousse
I ♥ my keyboard.
#+begin_src emacs-lisp
(global-disable-mouse-mode)
;; And, for evil's individual states.
(mapc #'disable-mouse-in-keymap
      (list evil-motion-state-map
            evil-normal-state-map
            evil-visual-state-map
            evil-insert-state-map))
#+end_src

*** Dumb-Jump
Enable ~xref~ back-end.
#+BEGIN_SRC emacs-lisp
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+END_SRC

And, in case things go sideways:
#+BEGIN_SRC emacs-lisp
(setq dumb-jump-default-project "~/main")
#+END_SRC

*** EVIL
So there's this one package called ~evil-escape~. Here's the thing, I don't use it. So...
#+BEGIN_SRC emacs-lisp
(after! evil (evil-escape-mode nil))
#+END_SRC

*** Eshell
Love️ + Eshell = Universe
#+begin_src emacs-lisp
(setq eshell-aliases-file "~/.doom.d/eshell-aliases")
#+end_src

*** Nov (EPUBs)
The place all want to spend their time.
#+begin_src emacs-lisp
(setq nov-text-width 100)
#+end_src

*** Org-Download
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'org-download-enable)
(setq org-download-image-dir "~/main/egorbelibov/assets/roam/download")
#+END_SRC

*** Org-Roam
The thinking process.
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/main/egorbelibov/data/braindump")
#+END_SRC

*** Org-Journal
The evaluation process.
#+BEGIN_SRC emacs-lisp
(after! org-journal
  (setq org-journal-date-prefix "#+TITLE: "
        org-journal-date-format "%a %d/%m/%y (%j)"
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-dir (file-truename "~/main/egorbelibov/data/braindump/private")))
#+END_SRC

*** Projectile
All about those projects.
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/main/"))
#+END_SRC

*** Ligatures
#+begin_src emacs-lisp
(setq +ligatures-in-modes '(not org-mode special-mode comint-mode eshell-mode term-mode vterm-mode))
#+end_src

*** Ivy-Youtube
Browse consciously.
#+begin_src emacs-lisp
(setq ivy-youtube-key youtube-key
      ivy-youtube-play-at "/usr/local/bin/mpv")
#+end_src

*** IRC Circe Config
#+begin_src emacs-lisp
 ;; (setq circe-network-options
 ;;      '(("Freenode"
 ;;         :nick "egorbelibov"
 ;;         :channels (:after-auth "#c1" "c2" "c3")
 ;;         :nickserv-password "¯\_(ツ)_/¯")))
(load-file "~/.doom.d/circe-private-config.el")
#+end_src

** Language Configuration
Talk is cheap. Show me the code.

*** Org Mode
**** Tweaking Defaults
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org"
      org-log-done 'time
      org-export-in-background t
      org-catch-invisible-edits 'smart)
#+END_SRC

*** LSP
Language Server Protocol?
#+begin_src emacs-lisp
(setq lsp-lens-enable nil
      lsp-auto-execute-action nil
      lsp-before-save-edits nil
      lsp-ui-sideline-enable nil
      lsp-modeline-code-actions-mode t
      lsp-headerline-breadcrumb-enable nil)
#+end_src

**** Flycheck
The things that YELLS at your code everytime you make a mistake.
#+begin_src emacs-lisp
(setq flycheck-check-syntax-automatically '(save idle-change mode-enabled))
#+end_src

*** Elm
A delightful language for reliable web applications.

#+begin_src emacs-lisp
(setq elm-tags-on-save t
      elm-sort-imports-on-save t
      elm-format-on-save t)
#+end_src

Humane indentation config.
#+begin_src emacs-lisp
(setq elm-mode-hook '(elm-indent-simple-mode))
#+end_src

elm-extra/import
#+begin_src emacs-lisp
(defun elm-extra/import (&optional input)
  "Prompt for an import statement (INPUT) to add to the current file."
  (interactive)
  (let ((statement (read-string "Import statement: " (concat "import " input))))
    (save-excursion
      (goto-char (point-min))
      (if (re-search-forward "^import " nil t)
          (beginning-of-line)
        (forward-line 1)
        (insert "\n"))
      (insert (concat statement "\n")))
    (elm-sort-imports)))
#+end_src

elm-extra/import-from-file
#+begin_src emacs-lisp
(defun elm-extra/import-from-file ()
  "Select an elm file interactively and add an import for the corresponding module."
  (interactive)
  (let*
      ((all-files (projectile-current-project-files))
       (elm-files (seq-filter (lambda (f) (s-ends-with-p ".elm" f)) all-files))
       (file-name (projectile-completing-read "Module to import: " elm-files)))
    (when file-name
      (let*
          ((full-file-name (expand-file-name file-name (projectile-project-root)))
           (module-name (with-current-buffer (find-file-noselect full-file-name)
                          (elm--get-module-name))))
        (elm-extra/import module-name)))))
#+end_src

elm-extra/show-and-copy-module-name
#+begin_src emacs-lisp
(defun elm-extra/show-and-copy-module-name ()
  "Show and copy the current module's name in the minibuffer."
  (interactive)
  (message (kill-new (elm--get-module-name))))
#+end_src

elm-extra/current-module-name
#+begin_src emacs-lisp
(defun elm-extra/current-module-name ()
  "Get the module name of the current buffer."
  (let*
      ((raw-components
        (file-name-sans-extension (file-relative-name (buffer-file-name) (elm-test-runner--project-root))))
       (components
        (split-string raw-components "/"))
       (modules
        (remove-if (lambda (c) (string-equal c (downcase c)))
                   components)))
    (string-join modules ".")))
#+end_src

elm-extra/elm-module-for-path
#+begin_src emacs-lisp
(defun elm-extra/elm-module-for-path ()
  "Figure out the module name for a path.  Useful in snippets!"
  (let* ((raw-components
          (replace-regexp-in-string (projectile-project-root)
                                    ""
                                    (file-name-sans-extension (buffer-file-name))))

         (components
          (split-string raw-components "/"))

         (modules
          (remove-if
           (lambda (component) (string-equal component (downcase component)))
           components))
         )
    (string-join modules ".")))
#+end_src

*** Counsel
The answer to the universe is 42.
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq-local counsel-dash-docsets '("Emacs Lisp"))))
(add-hook 'elm-mode-hook (lambda () (setq-local counsel-dash-docsets '("Elm"))))
(add-hook 'haskell-mode-hook (lambda () (setq-local counsel-dash-docsets '("Haskell"))))
(add-hook 'elixir-mode-hook (lambda () (setq-local counsel-dash-docsets '("Elixir"))))
(add-hook 'rust-mode-hook (lambda () (setq-local counsel-dash-docsets '("Rust"))))
(add-hook 'web-mode-hook (lambda () (setq-local counsel-dash-docsets '("JavaScript" "HTML" "CSS"))))
(add-hook 'js-mode-hook (lambda () (setq-local counsel-dash-docsets '("JavaScript" "HTML" "CSS"))))
(add-hook 'html-mode-hook (lambda () (setq-local counsel-dash-docsets '("JavaScript" "HTML" "CSS"))))
(add-hook 'css-mode-hook (lambda () (setq-local counsel-dash-docsets '("CSS"))))
(add-hook 'sql-mode-hook (lambda () (setq-local counsel-dash-docsets '("CouchDB" "PostgreSQL"))))
#+end_src
