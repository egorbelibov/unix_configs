#+TITLE: Doom Emacs Configuration
#+AUTHOR: egorbelibov

#+BEGIN_QUOTE
No rules are universal (except this one).
#+END_QUOTE

* Core Configurations
Jiggle things up with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+BEGIN_SRC emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

** User Info
You know, all the conventional stuff…
#+BEGIN_SRC emacs-lisp
(setq
 user-full-name "Egor Belibov"
 user-mail-address "egor@belibov.dev")
#+END_SRC

** Sweat Defaults
#+BEGIN_QUOTE
We either live with intention or exist by default.
#+END_QUOTE

*** Common Settings
Quite personal matters, hence no further comments.
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 delete-selection-mode 1
 display-line-numbers-type nil
 doom-modeline-enable-word-count nil
 editorconfig-mode 1
 evil-want-fine-undo t
 fill-column 100
 global-hl-line-mode nil
 hl-line-mode nil
 help-window-select t
 indent-tabs-mode nil
 tab-width 4)
#+END_SRC

Fine tuned defaults:
#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+END_SRC

*** Funkier Window Splitting
It's useful to be asked which file to open after splitting.
#+BEGIN_SRC emacs-lisp
(defadvice! promt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq +ivy-buffer-preview t)
#+END_SRC

*** Buffer Defaults
New buffers should be, by default, opened in ~org-mode~, cause ~org-mode~.
#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'org-mode)
#+END_SRC

** User Interface
*** Font Face
The *ultimate* font for hackers.
#+BEGIN_SRC emacs-lisp
(setq
 doom-font (font-spec :family "Hack" :size 12)
 doom-big-font (font-spec :family "Hack" :size 16)
 doom-variable-pitch-font (font-spec :family "Hack" :size 16)
 doom-serif-font (font-spec :family "Times New Roman"))
#+END_SRC

*** Theme
My *ultimate* theme based on ~Solarized~.
#+BEGIN_SRC emacs-lisp
(load-theme 'eb-dark t)
#+END_SRC

*** Modeline
~LF UTF-8~ is the default file encoding, and thus not worth noting in the modeline.
#+BEGIN_SRC emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC

*** Org-mode
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Bindings
Life-time savers (kinda).

*** (Enable/Disable) Fill column
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix "b"
       :desc "Display fill-column indicator"    "f" #'display-fill-column-indicator-mode))
#+END_SRC

*** File
#+BEGIN_SRC emacs-lisp
(map!
 :leader
 (:prefix-map ("f" . "file")
  (:prefix-map ("g" . "goto")
   :desc "Drive"        "/" (cmd! (find-file "/"))
   :desc "Desktop"      "D" (cmd! (find-file "~/Desktop"))
   :desc "Main"         "m" (cmd! (find-file "~/main"))
   :desc "Downloads"    "d" (cmd! (find-file "~/Downloads"))
   :desc "Tmp"          "t" (cmd! (find-file "/tmp"))
   :desc "Home"         "h" (cmd! (find-file "~")))))
#+END_SRC

** Package Stack
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:
#+BEGIN_SRC emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+END_SRC

*** Instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Install packages here, by declaring them with the ~package!~ macro.
Upon adding new package, run ~doom refresh~ and restart Emacs.

**** Package in MELPA/ELPA/emacsmirror
To install ~the-package~ from MELPA, ELPA or emacsmirror:
#+BEGIN_SRC emacs-lisp
(package! the-package)
#+END_SRC

**** Packages from git repositories
To install a package directly from a particular repo, you'll need to specify a ~:recipe~.
You'll find documentation on what ~:recipe~ accepts [[https://github.com/raxod502/straight.el#the-recipe-format][here]]:
#+BEGIN_SRC emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+END_SRC

If the package you are trying to install does not contain a ~PACKAGENAME.el~ file, or is
located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:
#+BEGIN_SRC emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+END_SRC

**** Disabling build-in packages
To disable a package included with Doom, you can do so here with the ~:disable~ property:
#+BEGIN_SRC emacs-lisp
(package! builtin-package :disable t)
#+END_SRC

#+RESULTS:
| builtin-package |

Override the recipe of a built in package without having to specify all the properties
for ~:recipe~. These will inherit the rest of its recipe from Doom or the
package providers.
#+BEGIN_SRC emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+END_SRC

Specify a ~:branch~ to install a package from a particular branch or tag. This is required
for some

#+BEGIN_SRC emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+END_SRC

*** Sweat Packages
#+BEGIN_QUOTE
Always strive to make complex things simple.
#+END_QUOTE

**** All The Fun
Every so often, you want every else to /know/ that you're typing, or just amuse oneself.
#+BEGIN_SRC emacs-lisp
(package! selectric-mode)
#+END_SRC

Flash words, increase reading speed.
#+BEGIN_SRC emacs-lisp
(package! spray)
#+END_SRC

Let's get those fingers moving.
#+BEGIN_SRC emacs-lisp
(package! speed-type)
#+END_SRC

**** Convenient
The technologies of convenience are making our sphere of exploration and experience smaller.

The worst part about ~org-mode~? Having to leave it.
#+BEGIN_SRC emacs-lisp
(package! org-pandoc-import
  :recipe (:host github
           :repo "tecosaur/org-pandoc-import"
           :files ("*.el" "filters" "preprocessors")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package! org-pandoc-import
  :after org)
#+END_SRC

The fanciest terminal for emacs.
#+BEGIN_SRC emacs-lisp
(package! multi-term)
#+END_SRC

Who uses the mouse in Emacs?
#+BEGIN_SRC emacs-lisp
(package! disable-mouse)
#+END_SRC

When in need of logging commands.
#+BEGIN_SRC emacs-lisp
(package! command-log-mode)
#+END_SRC

Every one needs to jump around dumbly from time to time, right?
#+BEGIN_SRC emacs-lisp
(package! dumb-jump)
#+END_SRC

** Package Configuration
#+BEGIN_QUOTE
Another famous fluctuation that programs you is the exact configuration of your DNA.
#+END_QUOTE

*** Calc
Cause radians are rad.
#+BEGIN_SRC emacs-lisp
(setq calc-angle-mode 'rad
      calc-algebraic-mode t ;; allows '2*x instead of 'x<RET>2*
      calc-symbolic-mode t) ;; keeps stuff like √2 irrational for as long as possible
#+END_SRC

*** Company
Completion is nice but, only when I want it...
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay nil)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+END_SRC

Also, improve ~company~ (related) memory.
#+BEGIN_SRC emacs-lisp
(setq-default history-length 1000)
(setq-default history-delete-duplicates t)
#+END_SRC

*** Spell-Fu
#+BEGIN_SRC emacs-lisp
(setq spell-fu-directory "~/.doom.d/spell-fu")
#+END_SRC

*** Disable-Mousse
I ♥ my keyboard.
#+BEGIN_SRC emacs-lisp
(global-disable-mouse-mode)
;; And, for evil's individual states.
(mapc #'disable-mouse-in-keymap
      (list evil-motion-state-map
            evil-normal-state-map
            evil-visual-state-map
            evil-insert-state-map))
#+END_SRC

*** Dumb-Jump
Enable ~xref~ backend.
#+BEGIN_SRC emacs-lisp
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+END_SRC

And, in case things go sideways:
#+BEGIN_SRC emacs-lisp
(setq dumb-jump-default-project "~/main")
#+END_SRC

*** EVIL
So there's this one package called ~evil-escape~. Here's the thing, I don't use it. So...
#+BEGIN_SRC emacs-lisp
(after! evil (evil-escape-mode nil))
#+END_SRC

*** Projectile
All about those projects.
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/main/"))
#+END_SRC

** Language Configuration
Talk is cheap. Show me the code.

*** Org Mode
**** Tweaking Defaults
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/.org"
      org-log-done 'time
      org-export-in-background t
      org-catch-invisible-edits 'smart)
#+END_SRC
